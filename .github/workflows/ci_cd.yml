name: GitHub CI

# run only on main branch.  This avoids duplicated actions on PRs
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main
      #- release/*
env:
  PYMECHANICAL_PORT: 10000  # default won't work on GitHub runners
  PYMECHANICAL_START_INSTANCE: FALSE
  DOCKER_PACKAGE: ghcr.io/ansys/mechanical
  DOCKER_MECH_CONTAINER_NAME: mechanical
  PACKAGE_NAME: ansys-mechanical-core
  PACKAGE_NAMESPACE: ansys.mechanical.core
  DOCUMENTATION_CNAME: mechanical.docs.pyansys.com
  MAIN_PYTHON_VERSION: '3.10'

  # concurrency:
  #   group: ${{ github.workflow }}-${{ github.ref }}
  #   cancel-in-progress: true

jobs:

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys code style checks
        uses: ansys/actions/code-style@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          use-python-cache: false

  doc-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: ansys/actions/doc-style@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # smoke-tests:
  #   name: Build and Smoke tests
  #   runs-on: ${{ matrix.os }}
  #   needs: [style]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, windows-latest, macos-latest]
  #       python-version: ['3.8', '3.9', '3.10', '3.11']
  #       should-release:
  #         - ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
  #       exclude:
  #         - should-release: false
  #           os: macos-latest
  #   steps:
  #     - name: Build wheelhouse and perform smoke test
  #       uses: ansys/actions/build-wheelhouse@v4
  #       with:
  #         library-name: ${{ env.PACKAGE_NAME }}
  #         operating-system: ${{ matrix.os }}
  #         python-version: ${{ matrix.python-version }}
          # use-python-cache: false

  # changelog-check:
  #   name: Changelog Update Check
  #   if: github.event_name == 'pull_request'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         token: ${{ secrets.CHANGELOG_TOKEN }}

  #     - uses: dangoslen/dependabot-changelog-helper@v3
  #       if: ${{ github.actor == 'dependabot[bot]' }}
  #       with:
  #         activationLabel: 'dependabot'
  #         changelogPath: './CHANGELOG.md'

  #     - uses: stefanzweifel/git-auto-commit-action@v5
  #       if: ${{ github.actor == 'dependabot[bot]' }}
  #       with:
  #         commit_message: "Updated Changelog"

  #     - name: Get all doc files that have changed
  #       id: changed-files-yaml
  #       uses: tj-actions/changed-files@v39
  #       with:
  #         files_yaml: |
  #           doc:
  #             - 'CHANGELOG.md'

  #     - name: Check Changelog Edited
  #       run: |
  #         if [[ "${{ steps.changed-files-yaml.outputs.doc_all_changed_files }}" == "CHANGELOG.md" ]]; then
  #             echo "CHANGELOG.md was updated."
  #         elif [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
  #             echo "CHANGELOG.md was autoupdated... Workflow will trigger."
  #         else
  #             echo "Please update CHANGELOG.md before merging the pull request."
  #             exit 1
  #         fi

  build:
    name: Build package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
      - name: Install build requirements
        run: |
          pip install -U pip
          pip install build
      - name: Build
        run: python -m build
      - name: Install
        run: pip install dist/*.whl
      - name: Test import
        run: |
          mkdir tmp
          cd tmp
          python -c "import ansys.mechanical.env; print('Successfully imported ansys.api.mechanical')"
          python -c "from ansys.mechanical.env import __version__; print(__version__)"
      - name: Upload packages
        uses: actions/upload-artifact@v2
        with:
          name: ansys-api-mechanical-packages
          path: dist/
          retention-days: 7

  # Release:
  #   if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ env.MAIN_PYTHON_VERSION }}

  #     - uses: actions/download-artifact@v2

  #     - name: Display structure of downloaded files
  #       run: ls -R

  #     - name: Upload to Public PyPi
  #       run: |
  #         pip install twine
  #         twine upload --skip-existing ./**/*.whl
  #         twine upload --skip-existing ./**/*.tar.gz
  #       env:
  #         TWINE_USERNAME: __token__
  #         TWINE_PASSWORD: ${{ secrets.ANSYS_API_MECHANICAL_PYPI_TOKEN }}

  #     - name: Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         generate_release_notes: true
  #         files: |
  #           ./**/*.whl
  #           ./**/*.tar.gz
  #           ./**/*.pdf


  pymechanical-tests:
    name: PyMechanical tests
    runs-on: public-ubuntu-latest-8-cores
    needs: [style, revn-variations]
    container:
      image: ghcr.io/ansys/mechanical:23.2.0
      options: --entrypoint /bin/bash
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        python-version: ['3.9']
        # TODO : python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - uses: actions/checkout@v4
      - name: Set up python and pip
        run: |
          apt update
          apt install software-properties-common -y
          add-apt-repository ppa:deadsnakes/ppa -y
          apt install python${{ matrix.python-version }} -y
          ln -s /usr/bin/python${{ matrix.python-version }} /usr/bin/python
          apt install python${{ matrix.python-version }}-venv -y

      - name: Install pip
        if: matrix.python-version == '3.8'
        run: |
          apt install -y python3-pip

      - name: Install pip for >3.8
        if: matrix.python-version != '3.8'
        run: |
          python -m ensurepip --default-pip

      - name: Upgrade pip
        run: |
          pip3 install --upgrade pip
          python --version
          pip3 --version

      - name: Install dependencies
        run: |
          apt install -y lsb-release xvfb
          pip3 install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org pip setuptools build

      - name: Install packages for testing
        run: |
          pip3 install -e .
          pip3 install -r requirements/requirements/requirements_tests.txt

      - name: Set environment variable
        run: echo "ANSYSCL232_DIR=/install/ansys_inc/v232/licensingclient" >> $GITHUB_ENV

      - name: workbench_lite_test
        env:
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
          ANSYSLMD_LICENSE_FILE: 1055@${{ secrets.LICENSE_SERVER }}
          ANSYS_WORKBENCH_LOGGING_CONSOLE: 0
          ANSYS_WORKBENCH_LOGGING: 0
          ANSYS_WORKBENCH_LOGGING_FILTER_LEVEL: 2
          NUM_CORES: 1
        run: |
          xvfb-run /install/ansys_inc/v232/aisol/.workbench_lite pytest -m embedding > pytest_output1.txt || true
          cat pytest_output1.txt
          #
          # Check if failure occurred
          #
          output=$(grep -c "FAILURES" pytest_output1.txt || true)
          if [ $output -eq 0 ]; then
            echo "Pytest execution succeeded"
            exit 0
          else
            echo "Pytest execution failed"
            exit 1
          fi
      - name: pymechanical-env test
        env:
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
          ANSYSLMD_LICENSE_FILE: 1055@${{ secrets.LICENSE_SERVER }}
          ANSYS_WORKBENCH_LOGGING_CONSOLE: 0
          ANSYS_WORKBENCH_LOGGING: 0
          ANSYS_WORKBENCH_LOGGING_FILTER_LEVEL: 2
          NUM_CORES: 1
        run: |
          xvfb-run mechanical-env pytest -m embedding > pytest_output2.txt || true
          cat pytest_output2.txt
          #
          # Check if failure occurred
          #
          output=$(grep -c "FAILURES" pytest_output2.txt || true)
          if [ $output -eq 0 ]; then
            echo "Pytest execution succeeded"
            exit 0
          else
            echo "Pytest execution failed"
            exit 1
          fi
      # - name: Upload coverage results
      #   uses: actions/upload-artifact@v3
      #   if: env.MAIN_PYTHON_VERSION == matrix.python-version
      #   with:
      #     name: coverage-tests-embedding
      #     path: .cov
      #     retention-days: 7

      # - name: Upload coverage results (as .coverage)
      #   uses: actions/upload-artifact@v3
      #   if: env.MAIN_PYTHON_VERSION == matrix.python-version
      #   with:
      #     name: coverage-file-tests-embedding
      #     path: .coverage
      #     retention-days: 7

  # doc-deploy:
  #     name: Documentation deploy
  #     runs-on: ubuntu-latest
  #     needs: [doc-build]

  #     steps:

  #       - name: Checkout
  #         uses: actions/checkout@v4

  #       - name: Download Artifacts
  #         uses: actions/download-artifact@v3
  #         with:
  #           name: documentation-html
  #           path: documentation-html

  #       - name: List all files
  #         run: ls -R .

  #       - name: Deploy to GitHub Pages
  #         if: contains(github.ref, 'refs/heads/main')
  #         uses: JamesIves/github-pages-deploy-action@v4
  #         with:
  #           token: ${{ secrets.GITHUB_TOKEN }}
  #           branch: gh-pages
  #           folder: documentation-html/
  #           clean: true
  #           single-commit: true